"use strict";var ngar=angular.module("angularGapiAnalyticsreporting",[]);ngar.run(function(){}),ngar.factory("ngar",["ngarLoadService","ngarAuthService","ngarManagementService","ngarReportService","ngarDataService",function(a,b,c,d,e){return{init:function(){a.loadAllApis().then(b.initAuth).then(c.init)["catch"](function(a){})},get:function(a){return d.buildRequest(a),d.getData(window.gapi).then(e.parseData).then(function(a){})["catch"](function(a){})}}}]),angular.module("angularGapiAnalyticsreporting").factory("ngarAuthService",["$rootScope",function(a){var b,c="1044610610585-5nopo43t8ekv9vvdfbi5p43fv4295uqr.apps.googleusercontent.com",d="https://www.googleapis.com/auth/analytics.readonly",e={authInitialized:!1,signedIn:!1,user:"signed out"},f=function(){return window.gapi.auth2.init({client_id:c,scope:d}).then(function(a){return b=window.gapi.auth2.getAuthInstance(),e.authInitialized=!0,h(b.isSignedIn.get()),b.isSignedIn.listen(h),a},function(a){return a})},g=function(){var a=b.currentUser.get();e.signedIn?e.user=a.getBasicProfile().getEmail():e.user="signed out"},h=function(b){e.signedIn=b,g(),a.$digest()},i=function(){return b.signIn()},j=function(){return b.signOut()};return{initAuth:f,signIn:i,signOut:j,isSignedIn:function(){return b?b.isSignedIn.get():!1},status:e}}]),angular.module("angularGapiAnalyticsreporting").factory("ngarDataService",["ngarManagementService",function(a){var b={data:[],dimensions:[],metrics:[],segments:[]},c=function(d){if(_.isUndefined(d))return b={},c;var e=d||{},f=e.reports[0].columnHeader.dimensions,g=e.reports[0].columnHeader.metricHeader.metricHeaderEntries,h=e.reports[0].data.rows;if(b.data=h.map(function(a){var b={};return f.forEach(function(c,d){"ga:date"===c&&(b[c]=new Date(moment(a.dimensions[d],"YYYYMMDD").format("YYYY-MM-DD"))),"ga:dateHour"===c?b[c]=new Date(moment(a.dimensions[d],"YYYYMMDDHH").format("YYYY-MM-DD HH:MM:SS")):b[c]=a.dimensions[d]}),g.forEach(function(c,d){b[c.name]=parseInt(a.metrics[0].values[d])}),b}),b.dimensions=f.map(function(c){var d=[],e={};return b.data.forEach(function(a){-1===d.indexOf(a[c])&&d.push(a[c])}),e="ga:segment"===c?{id:"ga:segment",dataType:"STRING",description:"A segment",group:"Segment",type:"SEGMENT",uiName:"Segment"}:a.items.metadata.find(function(a){return a.id===c}),{name:e.uiName,metadata:e,items:d}}),b.metrics=g.map(function(b){var c=a.items.metadata.find(function(a){return a.id===b.name});return{name:c.uiName,metadata:c}}),-1===f.indexOf("ga:segment"))b.segments=[];else{var i=_.find(b.dimensions,{name:"Segment"}).items;b.segments=_.intersectionWith(a.items.segments,i,function(a,b){return a.name===b})}return b};return{parseData:c,parsedData:b,cleanData:function(){b={data:[],dimensions:[],metrics:[],segments:[]}},getItemsOfDimension:function(a){return b.dimensions.find(function(b){return b.name===a}).items}}}]),angular.module("angularGapiAnalyticsreporting").factory("ngarLoadService",["$rootScope","$document","$q",function(a,b,c){var d={gapiLoaded:!1,auth2Loaded:!1,analyticsV3Loaded:!1,analyticsV4Loaded:!1},e="https://apis.google.com/js/api.js",f="https://analyticsreporting.googleapis.com/$discovery/rest",g="https://www.googleapis.com/discovery/v1/apis/analytics/v3/rest",h=function(){var f=c.defer(),g=function(){a.$apply(function(){d.gapiLoaded=!0,f.resolve(window.gapi)})},h=function(b){a.$apply(function(){d.gapiLoaded=!1,f.reject(b)})},i=b[0].createElement("script");i.type="text/javascript",i.async=!0,i.src=e,i.onreadystatechange=function(){"complete"===this.readyState?g():h(this.readyState)},i.onload=g,i.onerror=h;var j=b[0].getElementsByTagName("body")[0];return j.appendChild(i),f.promise},i=function(){var a=c.defer();return d.gapiLoaded?window.gapi.load("client:auth2",function(b){d.auth2Loaded=!0,a.resolve(b)},function(b){a.reject(b)}):a.reject("google api not loaded"),a.promise},j=function(){var a=c.defer();return d.gapiLoaded?window.gapi.client.load(g).then(function(b){d.analyticsV3Loaded=!0,a.resolve(b)},function(b){a.reject(b)}):a.reject("google api not loaded"),a.promise},k=function(){var a=c.defer();return d.gapiLoaded?window.gapi.client.load(f).then(function(b){d.analyticsV4Loaded=!0,a.resolve(b)},function(b){a.reject(b)}):a.reject("google api not loaded"),a.promise};return{loadGapi:h,loadAuth2:i,loadGarV3:j,loadGarV4:k,loadAllApis:function(){return h().then(i).then(j).then(k)},status:d}}]),angular.module("angularGapiAnalyticsreporting").factory("ngarManagementService",function(){var a={accountsTreeLoaded:!1,segmentsLoaded:!1,metadataLoaded:!1},b={accountsTree:[],segments:[],metadata:[],selectedViewId:"",breadcrumbs:{}},c=function(a){return function(a){return a}},d=function(c){var d=c.result.items.map(function(a){var b={};return b.name=a.name,b.id=a.id,b.properties=a.webProperties.map(function(a){var b={};return b.name=a.name,b.id=a.id,b.views=a.profiles.map(function(a){var b={};return b.name=a.name,b.id=a.id,b}),b}),b});return b.accountsTree=d.slice(),a.accountsTreeLoaded=!0,d},e=function(){return window.gapi.client.analytics.management.accountSummaries.list().then(d,c("error updating account tree"))},f=function(c){var d=c.result.items.map(function(a){return _.pick(a,["name","segmentId","type","definition"])});return b.segments=d.slice(),a.segmentsLoaded=!0,d},g=function(){return window.gapi.client.analytics.management.segments.list().then(f,c("error updating segments"))},h=function(c){var d=c.result.items.filter(function(a){return"PUBLIC"===a.attributes.status}).map(function(a){var b={id:a.id,allowedInSegments:a.attributes.allowedInSegments,dataType:a.attributes.dataType,description:a.attributes.description,group:a.attributes.group,type:a.attributes.type,uiName:a.attributes.uiName,calculation:"none"};return a.attributes.calculation&&(b.calculation=a.attributes.calculation),b});return b.metadata=d.slice(),a.metadataLoaded=!0,d},i=function(){return window.gapi.client.analytics.metadata.columns.list({reportType:"ga"}).then(h,c("error updating metadata"))},j=function(){var a=window.gapi.client.newBatch();return a.add(window.gapi.client.analytics.management.accountSummaries.list(),{id:"accounts"}),a.add(window.gapi.client.analytics.management.segments.list(),{id:"segments"}),a.add(window.gapi.client.analytics.metadata.columns.list({reportType:"ga"}),{id:"metadata"}),a.then(function(a){return{accountsTree:d(a.result.accounts),segments:f(a.result.segments),metdata:h(a.result.metadata)}})},k=function(a){var c={};return b.accountsTree.forEach(function(b){b.properties.forEach(function(d){d.views.forEach(function(e){return e.id===a?void(c={account:b.name,property:d.name,view:e.name}):void 0})})}),c};return{init:j,queryAccounts:function(){return e.then(d)},querySegments:function(){return g.then(f)},queryMetadata:function(){return i.then(h)},items:b,getBreadcrumbs:k,status:a}}),angular.module("angularGapiAnalyticsreporting").factory("ngarReportService",["$q","ngarAuthService",function(a,b){var c={viewId:"",dateStart:new Date,dateEnd:new Date,dimensions:[],metrics:[],segments:[],filters:[]},d={json:{},rawData:[]},e=function(){c={viewId:"",dateStart:new Date,dateEnd:new Date,dimensions:[],metrics:[],segments:[],filters:[]}},f=function(a){return _.isObject(a)&&(c=a),d.json={reportRequests:[{viewId:c.viewId,dateRanges:[{startDate:moment(c.dateStart).format("YYYY-MM-DD"),endDate:moment(c.dateEnd).format("YYYY-MM-DD")}]}]},d.json.reportRequests[0].dimensions=c.dimensions.map(function(a){return _.isObject(a)?{name:a.id}:_.isString(a)?{name:a}:void 0}),d.json.reportRequests[0].metrics=c.metrics.map(function(a){return _.isObject(a)?{expression:a.id}:_.isString(a)?{expression:a}:void 0}),_.isEmpty(c.segments)||(d.json.reportRequests[0].dimensions.push({name:"ga:segment"}),d.json.reportRequests[0].segments=c.segments.map(function(a){return _.isObject(a)?{segmentId:a.segmentId}:_.isString(a)?{segmentId:a}:void 0})),_.isEmpty(c.filters)||(d.json.reportRequests[0].dimensionFilterClauses=c.filters.map(function(a){return{dimensionName:a.dimension.id,operator:a.operator.operator,expressions:"IN_LIST"===a.operator.operator?a.expression.split(","):a.expression}})),d.json},g=function(c,f){var g=a.defer();b.isSignedIn||g.reject("user not signed in");var h=f||d.json;return c.client.analyticsreporting.reports.batchGet(h).then(function(a){d.rawData=a.result,g.resolve(a.result)},function(a){g.reject(a)}),e(),g.promise},h=function(a){c.viewId=a};return{buildRequest:f,getData:g,updateViewId:h,params:c,request:d}}]);